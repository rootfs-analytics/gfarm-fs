#
# Test case for operation when gfsd network interface is down
#

#
# Test parameters
#
# GFARM_HOME:	A directory path of Gfarm which this test will be executed
# FILE_SIZE:	Size of a file to be created
test_operation_in_gfsd_ifdown()
{
	RESULT=$RESULT_PASS

	# default parameter
	GFARM_HOME=${GFARM_HOME-"/"}
	FILE_SIZE=${FILE_SIZE-"100M"}

	# prepare: check whether required hosts are defined
	$GFSERVICE $DEBUG check_hostids_defined - "gfmd1 gfsd1 gfsd2 client1"
	[ $? -ne 0 ] && return $RESULT_UNSUPPORTED

	AUTH_TYPE=`$GFSERVICE $DEBUG get-config-gfarm-param gfmd1 AUTH_TYPE`
	if [ X$AUTH_TYPE = Xgsi ] || [ X$AUTH_TYPE = Xgsi_auth ]; then
		$GFSERVICE $DEBUG grid_proxy_init client1
	fi

	# prepare: make a file
	GFARM_FILE1=$GFARM_HOME/${TEST_EXEC_ID}_1
	GFARM_FILE2=$GFARM_HOME/${TEST_EXEC_ID}_2
	dd if=/dev/zero bs=$FILE_SIZE count=1 | tr "\000" "a" | \
		$GFSERVICE $DEBUG read_and_register client1 $GFARM_FILE1 \
		gfmd1 gfsd1
	dd if=/dev/zero bs=$FILE_SIZE count=1 | tr "\000" "a" | \
		$GFSERVICE $DEBUG read_and_register client1 $GFARM_FILE2 \
		gfmd1 gfsd2

	# prepare: make network interface down
	$GFSERVICE $DEBUG ifdown gfsd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to execute ifdown on gfsd1"
		return $RESULT_FATAL
	fi

	# step: write file
	GFARM_FILE3=$GFARM_HOME/${TEST_EXEC_ID}_3
	dd if=/dev/zero bs=$FILE_SIZE count=1 | tr "\000" "a" | \
		$GFSERVICE $DEBUG read_and_register client1 $GFARM_FILE3 \
		gfmd1 gfsd2
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to make a file on gfsd2"
		RESULT=$RESULT_FAIL
	fi

	# step: read file
	$GFSERVICE $DEBUG export_file client1 $GFARM_FILE2 gfmd1 > /dev/null
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to read a file on gfsd2"
		RESULT=$RESULT_FAIL
	fi

	# step: write file
	GFARM_FILE4=$GFARM_HOME/${TEST_EXEC_ID}_4
	dd if=/dev/zero bs=$FILE_SIZE count=1 | tr "\000" "a" | \
		$GFSERVICE $DEBUG read_and_register client1 $GFARM_FILE4 \
		gfmd1 gfsd1
	if [ $? -eq 0 ]; then
		log_warn "$TESTNAME: wrote file unexpectedly to gfsd1"
		RESULT=$RESULT_XPASS
	fi

	# step: read file
	$GFSERVICE $DEBUG export_file client1 $GFARM_FILE1 gfmd1 > /dev/null
	if [ $? -eq 0 ]; then
		log_warn "$TESTNAME: read a file unexpectedly from gfsd1"
		RESULT=$RESULT_XPASS
	fi

	# cleanup: make network interface up
	$GFSERVICE $DEBUG ifup gfsd1
	if [ $? -ne 0 ]; then
		log_warn "$TESTNAME: failed to execute ifup on gfsd1"
		return $RESULT_FATAL
	fi

	# cleanup: remove files
	$GFSERVICE $DEBUG gfcmd client1 gfrm -f $GFARM_FILE1 $GFARM_FILE2 \
		$GFARM_FILE3 $GFARM_FILE4

	return $RESULT
}
