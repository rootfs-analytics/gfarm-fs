Copyright (c) 2005 National Institute of Advanced Industrial Science
and Technology (AIST).  All Rights Reserved.

============
GfarmFS-FUSE
============

GfarmFS-FUSE enables you to mount a Gfarm filesystem in userspace.

  Gfarm:
      http://datafarm.apgrid.org/

  FUSE:
      http://fuse.sourceforge.net/


===========
Quick start
===========

Example on Fedora Core 5 :

    # yum install fuse fuse-libs fuse-devel
    # (belong user who can use FUSE to `fuse' group)
    # rpm -ivh gfarm-libs-1.3-0.i386.rpm gfarm-client-1.3-0.i386.rpm \
      gfarm-devel-1.3-0.i386.rpm

    $ (check your Gfarm configuration file )(ex.: ~/.gfarmrc)
    $ (check your Gfarm authenticaion )(ex.: gfhost, gfkey, grid-proxy-init)
    $ tar zxvf gfarmfs-fuse-1.3.tar.gz
    $ cd gfarmfs-fuse-1.3
    $ ./configure
    $ make
    $ mkdir ~/mountpoint
    $ ./gfarmfs ~/mountpoint
    $ cd ~/mountpoint


============
Installation
============

To build GfarmFS-FUSE, development packages of Gfarm version 1.1.1 (or
later) and FUSE version 2.2 (or later) are required.  When you install
Gfarm using RPM binary packages, it is necessary to install
gfarm-gsi-devel (or gfarm-devel) package also.

On FUSE version 2.5 (or later) and Linux Kernel 2.6.15 (or later),
GfarmFS-FUSE works with FUSE 2.5 compatible mode.
Otherwise GfarmFS-FUSE works with FUSE 2.2 compatible mode.

Installation steps of GfarmFS-FUSE:

    $ ./configure [options]
    $ make
    $ make install

Options for configure:

--prefix=<directory>

  specifies a destination directory for installation.  The 'gfarmfs'
  command is installed in 'directory'/bin.  Default is /usr/local.

If Gfarm and/or FUSE are installed to a nonstandard location, you may
need to specify the location by CPPFLAGS and LDFLAGS environment
variables in configure.  In the case of sh or bash,

    $ CPPFLAGS='-I/usr/local/include' LDFLAGS='-L/usr/local/lib -Wl,-R,/usr/local/lib' ./configure

In the case of csh or tcsh,

    $ env CPPFLAGS='-I/usr/local/include' LDFLAGS='-L/usr/local/lib -Wl,-R,/usr/local/lib' ./configure


=====
Mount
=====

Make sure your Gfarm environment is set. (see INSTALL.en of Gfarm)

Run the 'gfarmfs' command as a normal user to mount a Gfarm
filesystem:

    $ gfarmfs [GfarmFS options] <mountpoint> [FUSE options]

<mountpoint> needs to be a directory where a user can access in read
and write mode.  By default, other users than a user that mounts a
Gfarm file system cannot access files or directories under the mount
point.  'gfarmfs' is executed in a single thread by specifying the
'-s' FUSE option.  For other FUSE options, refer to README included in
FUSE package.

If you cannot mount, please check whether FUSE module is loaded, and
whether you are permitted about using FUSE.

You can also specify the mountpoint in /etc/fstab.

Examble of /etc/fstab:

  gfarmfs#-lsu  <mountpoint>  fuse  noauto,user,exec  0  0

How to mount in this case:

  $ mount <mountpoint>

=======
Unmount
=======

Run the 'fusermount' command (of FUSE. see README of FUSE):

    $ fusermount -u <mountpoint>


=======
Options
=======

About FUSE options, please print help by '-h' option and see README
of FUSE.

GfarmFS options:

-h

  print help.

-m <directory on Gfarm>

  The mountpoint shows the directory specified here instead of the
  root directory of Gfarm.  (ex. -m /username)

-s, --symlink

  enables symlink(2) emulation.  With this option, a symbolic link is
  emulated using an invisible file whose suffix is '.gfarmfs-symlink'
  to manage the target path.  You can use this option until Gfarm does
  support it.

-l, --linkiscopy

  enables link(2) emulation.  With this option, link(2) is emulated by
  copying a target file instead of creating a hardlink.  You can use
  this option until Gfarm does support it.

-u, --unlinkall

  With this option, unlink(2) removes all binaries for different
  architectures of the specified file that has execution bits.  This
  was the default feature of GfarmFS-FUSE version 1.0.

  Since GfarmFS-FUSE version 1.1, unlink(2) removes just a binary that
  corresponds to the client architecture of the specified file that
  has execution bits, which is the same behavior as the Gfarm syscall
  hooking library since Gfarm version 1.2.

-n, --dirnlink

  counts the nlink of a directory precisely.
  Default nlink of a directory is 32000.

-S, --disable-statfs

  disables statfs(2) and statvfs(2).

--unbuffered

  disables buffered I/O. (perform slowly)
  Since GfarmFS-FUSE version 1.3, new I/O functions of gfarmfs are
  used.  Therefore, without this option, Applications can avoid
  limitations of libgfarm.  With this option, use old I/O functions
  and disable these new feautures.

-a <architecture>

  specifies the architecture name of the client host.
  However, chmod(2) is not supported.

  In Gfarm file system, the architecture name is required to access
  files that has execution bits since they may have multiple binaries
  for each different architecture.  When the client host is a file
  system node, the architecture is automatically determined by the
  Gfarm metadata database.  Otherwise, you need to specify the client
  architecture explicitly to access files that has execution bits.
  <architecture> is typically a canonical system name like
  sparc-sun-solaris8. (see man gfhost)

  Since Gfarm version 1.2 or later, the 'client_architecture'
  directive in the configuration file or the environment variable
  GFARM_ARCHITECTURE can also specify the architecture name of the
  client host. (see man gfarm.conf)

==============
KNOWN PROBLEMS
==============

First, please see doc/KNOWN_PROBLEMS included in Gfarm.

But, some limitations are avoided on GfarmFS-FUSE.

  * stat(2) can return a correct st_size during open(2).
  * utime(2) and chmod(2) is effective during open(2).
  * rename(2) and chmod(2) do not destroy the metadata during open(2).
  * Thanks to FUSE, Applications using fork(2) or multithread have no
    problem on gfarmfs.

Peculiar PROBLEMS of GfarmFS-FUSE:

*** '-l' option of gfarmfs is not the hardlink behavior.

  The hardlink emulation creates a copy instead of a hardlink.
  Applications which expect the hardlink behavior cannot work
  correctly.

  The hardlink behavior will be supported in the first release of the
  Gfarm v2 branch.
  GfarmFS-FUSE will support it too on that occasion.

*** close(2) cannot notice the error of gfs_pio_close().

  Even if close(2) succeeded, the I/O buffer and the metadata of Gfarm
  may not be written correctly.

  We don't have a plan to fix this problem.

*** limitations on FUSE 2.2 compatible mode

  open(2), open(2), creat(2), access(2), ftruncate(2) cannot work
  correctly by the situation.  This is a limitation of FUSE 2.2.

  Using gfarmfs compiled on FUSE version 2.5 (or later) and Linux
  Kernel 2.6.15 (or later), this is not matter.

*** 'svn co' command may not work on gfarmfs.

  Now investigating.
