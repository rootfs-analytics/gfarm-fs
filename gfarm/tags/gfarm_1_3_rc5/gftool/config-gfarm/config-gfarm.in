#!/bin/sh
#
# $Id$

${DEBUG:="false"} && set -xu

# Gfarm installation directory
prefix="@prefix@"
sysconfdir="@sysconfdir@"
config_dir="@datadir@/gfarm/config"
globus_location="@globus_location@"

POSTGRESQL_TARGETS=postgresql
LDAP_TARGETS=ldap
backend_candidates="@postgresql_targets@ @ldap_targets@"
case "@postgresql_targets@" in
'')	backend_default=ldap;;
*)	backend_default=postgresql;;
esac
BACKEND_TYPE=$backend_default

#
PATH="${prefix}/bin:${prefix}/sbin:/bin:/usr/bin:/sbin:/usr/sbin:/usr/ucb:/usr/pkg/bin:/usr/pkg/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
export PATH
search_path="$PATH":/usr/local/sbin:/usr/local/bin:/usr/pkg/sbin:/usr/pkg/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/ucb:/usr/lib/postgresql/bin

PROGNAME=`basename $0`

awk=awk
if [ -f /usr/bin/nawk ]; then awk=/usr/bin/nawk; fi

status=1
sed_script=/tmp/cf$$
admin_password=/tmp/ap$$
password=/tmp/up$$
rm -f $sed_script $password $admin_password
trap 'rm -f $sed_script $password $admin_password; stty echo; exit $status' 0 1 2 15

#
# check whether shell function does work or not.
#
BOURNE_SHELL="${BOURNE_SHELL-/bin/sh}"
if [ x"$1" = x--re-invoked ]; then
	# shell function works with this shell, remove --re-invoked option
	shift
elif "$BOURNE_SHELL" -c 'shellfunc() { exit 0; }; shellfunc' 2>/dev/null; then
	# shell function works
	:
else
	# Search other shell that supports shell functions
	for sh in ksh bash zsh sh ash bsh sh5; do
		set `IFS=:;
		 P="/bin:/usr/5bin:/usr/bin:/usr/local/bin:/usr/pkg/bin:$PATH";
		 echo $P`
		for dir
		do
			shell="$dir/$sh"
			if ( [ -f "$shell" ] || [ -f "$shell.exe" ] ) &&
				"$shell" -c 'shellfunc() { exit 0; };
					shellfunc' 2>/dev/null
			then
				BOURNE_SHELL="$shell" exec "$shell" "$0" \
					--re-invoked ${1+"$@"}
			fi
		done
	done
	echo "$PROGNAME: cannot find a shell which supports functions" >&2
	exit 1
fi

gen_passwd()
{
	chars="=.0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

	if [ -r /dev/urandom ]; then
		# enough entropy, use 258bit(=log2(64)*43) key

		dd if=/dev/urandom bs=44 count=1 2>/dev/null | od -d |
		$awk '
		BEGIN{
			chars="'"$chars"'"
			k=length(chars)
			chars_per_word=2
			l=43 # 43 characters, 256bits/log2(64) = 42.666
		}
		{
			for (i = 2; i <= NF; i++) {
				r = $i
				for (j = 0; j < chars_per_word; j++) {
					if (l <= 0)
						exit
					printf "%c", substr(chars, r%k + 1, 1)
					r /= k
					--l
				}
			}
		}
		END {
			printf "\n"
		}'
	else
		# 32bit entropy due to the seed, use 66bit(=log2(64)*11) key

		$awk '
		BEGIN {
			chars="'"$chars"'"
			k=length(chars)

			srand(); now = srand();
			srand('$$' * 12 * 60 * 60 + now)

			for (i = 0; i < 11; i++) {
				printf "%c", substr(chars, int(rand()*k)+1, 1)
			}
			printf "\n"
			exit
		}'
	fi
}

usage()
{
	echo >&2 "usage: $PROGNAME [--prefix prefix] [-t] [-f] [-W] [-w]"
	echo >&2 "	[-b metadata_backend] [-V metadata_backend_version]"
	echo >&2 "	[-U backend_admin_user] [-u backend_user]"
	echo >&2 "	[-d domain_name] [-h hostname]"
	echo >&2 "	[-l metadata_directory] [-p metadata_backend_port]"
	echo >&2 "	[-s gfsd_port] [-m gfmd_port]"
	echo >&2 "  metadata_backend: $backend_candidates (default is $backend_default)"
	exit 1
}

ABORT()
{
	[ $# -gt 0 ] && echo >&2 "${PROGNAME}: $@"
	echo >&2 "$PROGNAME failure"
	exit 1
}

sanity()
{
	rv=0
	case $BACKEND_TYPE in
	postgresql)
		case $BACKEND_VERSION in
		[1-6].*|7.[0-3]|unknown)	# 7.3 or before
			echo "WARNING: PostgreSQL version 7.4 or later required: $BACKEND_VERSION"
			rv=1
			;;
		esac
		if [ ! -x "$BACKEND_PREFIX/bin/pg_config" ]; then
			echo "WARNING: command not found: pg_config" >&2
			rv=1
		fi
		if [ ! -x "$PGSQL_BINDIR/pg_ctl" ]; then
			echo "WARNING: command not found: pg_ctl" >&2
			rv=1
		fi
		if [ ! -x "$PGSQL_BINDIR/psql" ]; then
			echo "WARNING: command not found: psql" >&2
			rv=1
		fi
		;;
	ldap)
		if [ ! -x "$OPENLDAP_SLAPADD" ]; then
			echo "WARNING: command not found: slapadd" >&2
			rv=1
		fi
		if [ ! -x "$OPENLDAP_LIBEXEC/slapd" ]; then
			echo "WARNING: command not found: slapd" >&2
			rv=1
		fi
		if [ ! -f "$OPENLDAP_ETC/schema/core.schema" ]; then
			echo "WARNING: file not found:" \
				"$OPENLDAP_ETC/schema/core.schema" >&2
			rv=1
		fi
		;;
	esac
	return $rv
}

display_params()
{
    echo     "prefix [--prefix]: $CONFIG_PREFIX"
    echo     "metadata backend    [-b]: $BACKEND_TYPE"
    echo     "(supported backend: $backend_candidates)"
    case $BACKEND_TYPE in
    postgresql)
	echo "postgresql admin user     [-U]: $BACKEND_ADMIN_USER"
	echo "postgresql admin password [-W]: `if [ -r $admin_password ]; then cat $admin_password; else echo '(auto generated)'; fi`"
	echo "postgresql user           [-u]: $BACKEND_USER"
	echo "postgresql password       [-w]: `if [ -r $password ]; then cat $password; else echo '(auto generated)'; fi`"
	echo "postgresql prefix   [-P]: $BACKEND_PREFIX"
	echo "postgresql version  [-V]: $BACKEND_VERSION"
	;;
    ldap)
	echo "domain name         [-d]: $DOMAIN_NAME"
	echo "ldap root user      [-U]: $BACKEND_ADMIN_USER"
	echo "ldap root password  [-W]: `if [ -r $admin_password ]; then cat $admin_password; else echo '(auto generated)'; fi`"
	echo "ldap user           [-u]: $BACKEND_USER"
	echo "ldap password       [-w]: `if [ -r $password ]; then cat $password; else echo '(auto generated)'; fi`"
	echo "openldap prefix     [-P]: $BACKEND_PREFIX"
	echo "openldap version    [-V]: $BACKEND_VERSION"
	;;
    esac
    echo     "metadata directory  [-l]: $BACKEND_DATA_DIR"
    echo     "metaserver hostname [-h]: $BACKEND_HOSTNAME"
    case $BACKEND_TYPE in
    postgresql)
	echo "portmaster port     [-p]: $BACKEND_PORT";;
    ldap)
	echo "slapd port [-p]: $BACKEND_PORT";;
    esac
    echo     "gfmd port  [-m]: $GFMD_PORT"
    echo     "gfsd port  [-s]: $GFSD_PORT"

    case $BACKEND_TYPE in
    ldap)
	echo 'slapd DB cache size [-c]:' `
	case $SLAPD_DB in
	bdb)	echo $SLAPD_BDB_CACHESIZE bytes;;
	*)	echo '(this option is only available for SLAPD_DB="bdb")';;
	esac`
	echo 'slapd DB type ($SLAPD_DB):' "$SLAPD_DB"
	;;
    esac

    sanity
    exit 0
}

#
# parse arguments
#

while [ $# -gt 0 ] ; do
	case $1 in

	# set parameters
	  --prefix) shift; [ $# -ge 1 ] || usage
		CONFIG_PREFIX=$1
		;;
	  -b) shift; [ $# -ge 1 ] || usage
		case $1 in
		ldap|postgresql)
			BACKEND_TYPE=$1;;
		*)
			echo >&2 "unknown metadata backend <$1>"; exit 1;;
		esac
		;;
	  -d) shift; [ $# -ge 1 ] || usage
		DOMAIN_NAME=$1
		;;
	  -U) shift; [ $# -ge 1 ] || usage
		BACKEND_ADMIN_USER=$1
		;;
	  -u) shift; [ $# -ge 1 ] || usage
		BACKEND_USER=$1
		;;
	  -P) shift; [ $# -ge 1 ] || usage
		BACKEND_PREFIX=$1
		;;
	  -V) shift; [ $# -ge 1 ] || usage
		BACKEND_VERSION=$1
		;;
	  -l) shift; [ $# -ge 1 ] || usage
		BACKEND_DATA_DIR=$1
		;;
	  -h) shift; [ $# -ge 1 ] || usage
		BACKEND_HOSTNAME=$1
		;;
	  -p) shift; [ $# -ge 1 ] || usage
		BACKEND_PORT=$1
		;;
	  -m) shift; [ $# -ge 1 ] || usage
		GFMD_PORT=$1
		;;
	  -s) shift; [ $# -ge 1 ] || usage
		GFSD_PORT=$1
		;;
	  -c) shift; [ $# -ge 1 ] || usage
		SLAPD_BDB_CACHESIZE=$1
		;;

	# control options
	  -N)
		START_SERVICE=false
		;;
	  -f)
		FORCE=true
		;;
	  -t)
		DISPLAY_PARAMS=true
		;;
	  -W)
		stty -echo;
		( umask 077; 
		  printf "admin password: ";
		  $awk 'NR==1{print $0;exit}' > $admin_password
		  echo
		)
		stty echo
		;;
	  -w)
		stty -echo;
		( umask 077;
		  printf "user password: ";
		  $awk 'NR==1{print $0;exit}' > $password
		  echo
		)
		stty echo
		;;
	  *)
		usage
		;;
	esac
	shift
done

#
# search default $BACKEND_PREFIX
#

case $BACKEND_TYPE in
postgresql)
	if [ -z "${BACKEND_PREFIX-}" ]; then
		OIFS=$IFS
		IFS=":"
		set $search_path
		IFS=$OIFS
		for d
		do
			if [ -x "$d/pg_config" ]; then
				BACKEND_PREFIX=`dirname "$d"`
				: ${PGSQL_BINDIR:=`$d/pg_config --bindir`}
				break
			fi
		done
	fi
	;;
ldap)
	if [ -z "${BACKEND_PREFIX-}" ]; then
		OIFS=$IFS
		IFS=":"
		set $search_path
		IFS=$OIFS
		for d
		do
			if [ -x "$d/slapadd" ]; then
				BACKEND_PREFIX=`dirname "$d"`
				: ${OPENLDAP_SLAPADD:="$d/slapadd"}
				break
			fi
		done
	fi
	if [ -z "${BACKEND_PREFIX-}" ]; then
		OIFS=$IFS
		IFS=":"
		set $search_path
		IFS=$OIFS
		for d
		do
			b=`dirname "$d"`
			if [ -x "$b/sbin/slapadd" ]; then
				BACKEND_PREFIX=$b
				: ${OPENLDAP_SLAPADD:="$b/sbin/slapadd"}
				break
			fi
		done
	fi
	;;
esac


. $config_dir/config-gfarm.sysdep

#
# default values
#

: ${CONFIG_PREFIX:=}

case $BACKEND_TYPE in
postgresql)
	: ${RC_BACKEND_BASENAME=gfarm-pgsql}
	: ${PGSQL_BINDIR:="$BACKEND_PREFIX/bin"}
	;;
ldap)
	: ${RC_BACKEND_BASENAME=gfarm-slapd}
	if [ -f "$BACKEND_PREFIX/etc/openldap/schema/core.schema" ]; then
		: ${OPENLDAP_ETC:="$BACKEND_PREFIX/etc/openldap"}
	fi
	if [ -x "$BACKEND_PREFIX/sbin/slapadd" ]; then
		: ${OPENLDAP_SLAPADD:="$BACKEND_PREFIX/sbin/slapadd"}
	fi
	;;
esac

# NOTE: $CONFIG_PREFIX and $RC_BACKEND_BASENAME need to be set
#	before calling sysdep_defaults
# sysdep_defaults must set: $RC_DIR
sysdep_defaults

: ${START_SERVICE:=true}
: ${FORCE:=false}
: ${DISPLAY_PARAMS:=false}

: ${RUN_DIR:="$CONFIG_PREFIX/var/run"}

if [ X"$CONFIG_PREFIX" != X ]; then
	: ${GFARM_CONF_DIR:="$CONFIG_PREFIX/etc"}
else
	: ${GFARM_CONF_DIR:="$sysconfdir"}
fi
: ${GFARM_CONF:="$GFARM_CONF_DIR/gfarm.conf"}

: ${GFSD_PORT:="600"}

: ${GFMD_PORT:="601"}
: ${RC_GFMD_IN="$config_dir/gfmd.in"}

: ${RC_BACKEND_IN="$config_dir/$RC_BACKEND_BASENAME.in"}

: ${FQ_HOSTNAME:=`fq_hostname`}

: ${BACKEND_HOSTNAME:="$FQ_HOSTNAME"}
[ X$BACKEND_HOSTNAME = X ] &&
	ABORT 'cannot determine metadata server hostname, please specify it by -h option'

case $BACKEND_TYPE in
postgresql)
	: ${DB_NAME:="gfarm"}

	if [ -w / ]; then # is root?
		case `uname` in
		*BSD|DragonFly)
			: ${BACKEND_ADMIN_USER:="pgsql"};;
		*)	: ${BACKEND_ADMIN_USER:="postgres"};;
		esac
		: ${BACKEND_PRIVILEGE:="$BACKEND_ADMIN_USER"}
	else
		: ${BACKEND_ADMIN_USER:="`whoami`"}
		: ${BACKEND_PRIVILEGE:=""}
	fi
	if [ -f /usr/bin/getent ]; then
		if getent passwd "$BACKEND_ADMIN_USER" >/dev/null; then
			:
		else
			ABORT "postgresql admin user '$$BACKEND_ADMIN_USER' doesn't exist"
		fi
	fi

	: ${BACKEND_USER:="gfarm"}
	# default PostgreSQL port number is 5432
	: ${BACKEND_PORT:="10602"}
	: ${BACKEND_DATA_DIR:="$CONFIG_PREFIX/var/gfarm-pgsql"}

	if [ -z "${BACKEND_VERSION-}" ]; then
		if [ -x "$BACKEND_PREFIX/bin/pg_config" ]; then
			BACKEND_VERSION=`$BACKEND_PREFIX/bin/pg_config --version 2>&1 |
			  sed -n 's/.*PostgreSQL.* \([0-9][0-9]*\.[0-9][0-9]*\).*/\1/p'`
			if [ -z "$BACKEND_VERSION" ]
			then
				BACKEND_VERSION="unknown"
			elif expr "$BACKEND_VERSION" : '[0-9][0-9]*\.[0-9][0-9]*' \
					>/dev/null; then
				:
			else
				BACKEND_VERSION="unknown"
			fi
		else
			BACKEND_VERSION="unknown"
		fi
	fi
	;;

ldap)
	# We currently don't use ${BACKEND_PRIVILEGE} with LDAP
	: ${BACKEND_PRIVILEGE:=""}

	# NOTE: need to set $FQ_HOSTNAME before invoking dns_domainname
	: ${DOMAIN_NAME:=`dns_domainname`}
	[ X"$DOMAIN_NAME" = X ] && ABORT 'cannot determine DNS domain name'

	# official LDAP port number is 389
	: ${BACKEND_PORT:="10602"}

	: ${LDAP_BASE_DN="dc=`echo ${DOMAIN_NAME} | sed -e 's/\./,dc=/g'`"}
	: ${LDAP_LEAF_DC="`echo $LDAP_BASE_DN | sed -e 's/,.*//' -e 's/dc=//'`"}
	: ${BACKEND_ADMIN_USER:="cn=root,$LDAP_BASE_DN"}
	: ${BACKEND_USER:="$LDAP_BASE_DN"}

	: ${OPENLDAP_ETC:="/etc/openldap"}

	if [ -x "$BACKEND_PREFIX/sbin/slapd" ]; then
		: ${OPENLDAP_LIBEXEC:="$BACKEND_PREFIX/sbin"}
	else
		: ${OPENLDAP_LIBEXEC:="$BACKEND_PREFIX/libexec"}
	fi

	if [ -z "${BACKEND_VERSION-}" ]; then
		if [ -x "$BACKEND_PREFIX/bin/ldapsearch" ]; then
			BACKEND_VERSION=`"$BACKEND_PREFIX/bin/ldapsearch" -Vxn 2>&1 |
			  sed -n 's/.*ldapsearch \([0-9][0-9]*\.[0-9][0-9]*\).*/\1/p'`
			if [ -z "$BACKEND_VERSION" ]
			then
				BACKEND_VERSION="2.0" # assumes older version
			elif expr "$BACKEND_VERSION" : '[0-9][0-9]*\.[0-9][0-9]*' \
					>/dev/null; then
				:
			else
				BACKEND_VERSION="unknown"
			fi
		else
			BACKEND_VERSION="unknown"
		fi
	fi

	case $BACKEND_VERSION in
	[01].*|2.0)	# 2.0.X or before
		: ${SLAPD_DB:="ldbm"}
		: ${SLAPD_CONF_IN:="$config_dir/slapd.conf-2.0.in"}
		;;
	*)		# 2.1.X or later
		: ${SLAPD_DB:="bdb"}
		: ${SLAPD_CONF_IN:="$config_dir/slapd.conf-2.1.in"}
		;;
	esac

	: ${BACKEND_DATA_DIR:="$CONFIG_PREFIX/var/gfarm-ldap"}
	: ${LDAP_CONF_DIR:="$CONFIG_PREFIX/etc/gfarm-ldap"}
	: ${SLAPD_CONF:="$LDAP_CONF_DIR/slapd.conf"}
	: ${LDAP_SCHEMA:="$LDAP_CONF_DIR/gfarm.schema"}
	: ${INITIAL_LDIF:="$LDAP_CONF_DIR/initial.ldif"}

	# Debian uses dynamic loading for backend db module.
	# (e.g. /usr/lib/ldap/back_bdb.so)
	# We need "\" at the end-of-line, because this is used for
	# s/// statement for sed.
	if [ -f "$BACKEND_PREFIX/lib/openldap/back_$SLAPD_DB.so" ]; then
		: ${SLAPD_CONF_HOOK:='\
modulepath	'"$BACKEND_PREFIX/openlib/ldap"'\
moduleload	back_'"$SLAPD_DB"}
	elif [ -f "$BACKEND_PREFIX/lib/ldap/back_$SLAPD_DB.so" ]; then
		: ${SLAPD_CONF_HOOK:='\
modulepath	'"$BACKEND_PREFIX/lib/ldap"'\
moduleload	back_'"$SLAPD_DB"}
	fi

	: ${SLAPD_CONF_HOOK:=""}

	: ${SLAPD_BDB_CACHESIZE:="`memory_size|$awk '{printf "%.0f\n",$NF/2*1024*1024}'`"}
	: ${SLAPD_BDB_NCACHE:="2"} # 0/1: contiguous memory, >1: non-contiguous memory
	;;
esac

# -t option; display parameters
$DISPLAY_PARAMS && display_params

sanity || ABORT "aborted"

#########################################################################

init_replace()
{
	# create $sed_script for "replace" command

	(
	    umask 077
	    (
		cat <<_EOF_
s|@config_gfarm_prefix@|$prefix|g
s|@config_gfarm_gfarm_config@|$GFARM_CONF|g
s|@config_gfarm_globus_location@|${GLOBUS_LOCATION:-$globus_location}|g
s|@config_gfarm_backend_privilege@|$BACKEND_PRIVILEGE|g
s|@config_gfarm_backend_admin_user@|$BACKEND_ADMIN_USER|g
s|@config_gfarm_backend_user@|$BACKEND_USER|g
s|@config_gfarm_backend_hostname@|$BACKEND_HOSTNAME|g
s|@config_gfarm_backend_port@|$BACKEND_PORT|g
s|@config_gfarm_backend_prefix@|$BACKEND_PREFIX|g
s|@config_gfarm_backend_data_dir@|$BACKEND_DATA_DIR|g
s|@config_gfarm_database_name@|$DB_NAME|g
s|@config_gfarm_ldap_base_dn@|$LDAP_BASE_DN|g
s|@config_gfarm_ldap_leaf_dc@|$LDAP_LEAF_DC|g
s|@config_gfarm_ldap_conf_dir@|$LDAP_CONF_DIR|g
s|@config_gfarm_ldap_schema@|$LDAP_SCHEMA|g
s|@config_gfarm_slapd_config@|$SLAPD_CONF|g
s|@config_gfarm_slapd_config_hook@|$SLAPD_CONF_HOOK|g
s|@config_gfarm_slapd_database@|$SLAPD_DB|g
s|@config_gfarm_slapd_bdb_cachesize@|$SLAPD_BDB_CACHESIZE|g
s|@config_gfarm_slapd_bdb_ncache@|$SLAPD_BDB_NCACHE|g
s|@config_gfarm_openldap_libexec@|$OPENLDAP_LIBEXEC|g
s|@config_gfarm_openldap_etc@|$OPENLDAP_ETC|g
s|@config_gfarm_pgsql_bindir@|$PGSQL_BINDIR|g
s|@config_gfarm_gfmd_port@|$GFMD_PORT|g
s|@config_gfarm_gfmd_option@|-f $GFARM_CONF|g
s|@config_gfarm_gfsd_port@|$GFSD_PORT|g
s|@config_gfarm_gfsd_option@|-f $GFARM_CONF|g
s|@config_gfarm_run_dir@|$RUN_DIR|g
_EOF_
		$awk '{
		printf "s|@config_gfarm_backend_admin_password@|%s|g\n", $0
		}' $admin_password
		$awk '{
		printf "s|@config_gfarm_backend_password@|%s|g\n", $0
		}' $password
	    ) > $sed_script
	)
}

replace()
{
	sed -f $sed_script ${1+"$@"} | config_sysdep
}

mkcnf()
{
	# local out

	out=$1
	shift
	if ${1+"$@"} >$out; then
		echo created $out
	else
		ABORT "cannot create $out"
	fi
}

mkscript()
{
	mkcnf ${1+"$@"}
	chmod +x "$1" || ABORT "cannot chmod +x $1"
}

delete_file_or_directory()
{
	# local p

	for p
	do
		[ -d "$p" ] && rmdir "$p" > /dev/null 2>&1
		# [ -e "$p" ] isn't portable. not supported by Solaris /bin/sh
		if ls -1d "$p" >/dev/null 2>&1; then
			if $FORCE; then
				rm -rf "$p"
				echo removed "$p"
			else
				ABORT "$p already exist"
			fi
		fi
	done
}

create_directory()
{
	# local d

	for d
	do
		[ -d "$d" ] && continue
		if mkdir -p "$d"; then
			echo created "$d"
		else
			ABORT "mkdir -p $d, failed"
		fi
	done
}

#########################################################################

delete_file_or_directory \
	"$GFARM_CONF" \
	"$BACKEND_DATA_DIR" \
	"$RC_DIR/$RC_BACKEND_BASENAME"

create_directory \
	"$GFARM_CONF_DIR" \
	"$BACKEND_DATA_DIR" \
	"$RC_DIR" \
	"$RUN_DIR"

chmod 700 "$BACKEND_DATA_DIR"

case $BACKEND_TYPE in
postgresql)
	;;
ldap)
	create_directory "$LDAP_CONF_DIR"
	;;
esac

(
umask 077
[ -r $admin_password ] || gen_passwd > $admin_password
[ -r $password ] || gen_passwd > $password
)

init_replace

if [ -n "$BACKEND_PRIVILEGE" ]; then
	chown "$BACKEND_PRIVILEGE" "$BACKEND_DATA_DIR" \
		$admin_password $password
	case `uname` in
	SunOS|HP-UX|NetBSD|DragonFly)
		# "-" option makes Solaris and HP-UX display /etc/motd,
		# and it makes pkgsrc platforms (NetBSD/DragonFly) fail
		# because pkgsrc doesn't create the home directory by default.
		run_with_backend_privilege="su $BACKEND_PRIVILEGE -c /bin/sh";;
	*)
		# For SELinux we need to use 'runuser' not 'su'
		[ -x /sbin/runuser ] && SU=/sbin/runuser || SU=su
		run_with_backend_privilege="$SU - $BACKEND_PRIVILEGE -c /bin/sh"
		;;
	esac
else
	run_with_backend_privilege="/bin/sh"
fi

# this needs to be called before other "mkcnf" operations
# to make some directories.
mkcnf_gfmd_sysdep

# create configuration files
mkcnf "$GFARM_CONF"	replace "$config_dir/gfarm.conf-$BACKEND_TYPE.in"

case $BACKEND_TYPE in
postgresql)
	cat << _EOF_ | $run_with_backend_privilege || ABORT "initdb failed"
	$PGSQL_BINDIR/initdb -D "$BACKEND_DATA_DIR" --no-locale -E UTF-8
_EOF_

	# record the password
	cp -p $admin_password $BACKEND_DATA_DIR/admin_password

	cp -p "$BACKEND_DATA_DIR"/postgresql.conf \
	      "$BACKEND_DATA_DIR"/postgresql.conf.org

	$awk '
	/^[ 	]*#*[ 	]*listen_addresses[ 	]*=/ {
		if (/^[ 	]*listen_addresses/) {
			print "#" $0
		} else {
			print $0
		}
		if (!tcpip_socket_done && !listen_addresses_done) {
			print "listen_addresses = '"'*'"'"
			listen_addresses_done = 1
		}
		next
	}
	/^[ 	]*#*[ 	]*tcpip_socket[ 	]*=/ {
		if (/^[ 	]*tcpip_socket/) {
			print "#" $0
		} else {
			print $0
		}
		if (!tcpip_socket_done && !listen_addresses_done) {
			print "tcpip_socket = true"
			tcpip_socket_done = 1
		}
		next
	}
	/^[ 	]*#*[ 	]*port[ 	]*=/ {
		if (/^[ 	]*port/) {
			print "#" $0
		} else {
			print $0
		}
		if (!port_done) {
			print "port = '$BACKEND_PORT'"
			port_done = 1
		}
		next
	}
	/^[ 	]*#*[ 	]*password_encryption[ 	]*=/ {
		if (/^[ 	]*password_encryption/) {
			print "#" $0
		} else {
			print $0
		}
		if (!password_encryption_done) {
			print "password_encryption = true"
			password_encryption_done = 1
		}
		next
	}
	/^[ 	]*#*[ 	]*autovacuum[ 	]*=/ {
		if (/^[ 	]*autovacuum/) {
			print "#" $0
		} else {
			print $0
		}
		if (!autovacuum_done) {
			print "autovacuum = true"
			autovacuum_done = 1
		}
		next
	}
	/^[ 	]*#*[ 	]*stats_row_level[ 	]*=/ {
		if (/^[ 	]*stats_row_level/) {
			print "#" $0
		} else {
			print $0
		}
		if (!stats_row_level_done) {
			print "stats_row_level = on"
			stats_row_level_done = 1
		}
		next
	}
	{print}
	END {
		if (!listen_addresses_done && !tcpip_socket_done)
			print "listen_addresses = '"'*'"'"
		if (!port_done)
			print "port = '$BACKEND_PORT'"
		if (!password_encryption_done)
			print "password_encryption = true"
		# ignore autovacuum_done and stats_row_level_done for now.
		# PostgreSQL should be earlier than 8.0.X
	}'	 "$BACKEND_DATA_DIR"/postgresql.conf.org \
		>"$BACKEND_DATA_DIR"/postgresql.conf

	cp -p "$BACKEND_DATA_DIR"/pg_hba.conf \
	      "$BACKEND_DATA_DIR"/pg_hba.conf.org

	(
	# all comment out
	sed 's/^[0-9A-Za-z]/#&/' "$BACKEND_DATA_DIR"/pg_hba.conf.org

	echo ""
	echo ""
	echo "# TYPE	DATABASE	USER	CIDR-ADDRESS	METHOD"
	echo ""
	echo '# "local" is for Unix domain socket connections only'
	echo 'local	all		all			md5'
	echo '# IPv4 local connections:'
	echo 'host	all		all	127.0.0.1/32	md5'
	echo '# IPv6 local connections:'
	echo '#host	all		all	::1/128		md5'

	echo ""
	echo "host	$DB_NAME		$BACKEND_USER	0.0.0.0/0	md5"
	) > "$BACKEND_DATA_DIR"/pg_hba.conf
	;;

ldap)
	mkcnf "$LDAP_SCHEMA"	cat "$config_dir/gfarm.schema"
	(
	umask 077
	mkcnf "$INITIAL_LDIF"	replace "$config_dir/initial.ldif.in"
	mkcnf "$SLAPD_CONF"	replace "$SLAPD_CONF_IN"
	)
	case $SLAPD_DB in
	bdb) mkcnf "$BACKEND_DATA_DIR/DB_CONFIG" \
				replace "$config_dir/bdb.DB_CONFIG.in"
	     ;;
	esac

	# add initial data
	"${OPENLDAP_SLAPADD}" -f $SLAPD_CONF -l $INITIAL_LDIF &&
		echo add initial metadata ||
		ABORT "cannot add initial metadata"
	;;
esac

# create run scripts
mkscript "$RC_DIR/$RC_BACKEND_BASENAME"	replace "$RC_BACKEND_IN"
mkscript "$RC_DIR/gfmd"			replace "$RC_GFMD_IN"

case $BACKEND_TYPE in
postgresql)
	# backup configuration during temporary change
	cp -p "$BACKEND_DATA_DIR"/postgresql.conf \
	      "$BACKEND_DATA_DIR"/postgresql.conf.bak
	cp -p "$BACKEND_DATA_DIR"/pg_hba.conf \
	      "$BACKEND_DATA_DIR"/pg_hba.conf.bak

	# create temporary configuration files 
	$awk '
	/^[ 	]*#*[ 	]*listen_addresses[ 	]*=/ {
		if (/^[ 	]*listen_addresses/) {
			print "#" $0
		} else {
			print $0
		}
		if (!tcpip_socket_done && !listen_addresses_done) {
			# disable TCP access to be sure
			print "listen_addresses = '"''"'"
			listen_addresses_done = 1
		}
		next
	}
	/^[ 	]*#*[ 	]*tcpip_socket[ 	]*=/ {
		if (/^[ 	]*tcpip_socket/) {
			print "#" $0
		} else {
			print $0
		}
		if (!tcpip_socket_done && !listen_addresses_done) {
			# disable TCP access to be sure
			print "tcpip_socket = false"
			tcpip_socket_done = 1
		}
		next
	}
	/^[ 	]*#*[ 	]*unix_socket_directory[ 	]*=/ {
		if (/^[ 	]*unix_socket_directory/) {
			print "#" $0
		} else {
			print $0
		}
		if (!unix_socket_directory_done) {
			# prevent access except $BACKEND_ADMIN_USER
			print "unix_socket_directory = '"'$BACKEND_DATA_DIR'"'"
			unix_socket_directory_done = 1
		}
		next
	}
	{print}
	END {
		if (!tcpip_socket_done && !listen_addresses_done)
			print "listen_addresses = '"''"'"
		if (!unix_socket_directory_done)
			print "unix_socket_directory = '"'$BACKEND_DATA_DIR'"'"
	}'	 "$BACKEND_DATA_DIR"/postgresql.conf.bak \
		>"$BACKEND_DATA_DIR"/postgresql.conf
	echo 'local all	all trust' > "$BACKEND_DATA_DIR"/pg_hba.conf

	# We can't use rc.d script here, because "-w" option of pg_ctl doesn't
	# work, if unix_socket_directory is changed from default, at least on
	# PostgreSQL-8.0.3.
	# Also, we cannot use "restart" here, because it doesn't work either
	# at first invocation.
	cat << _EOF_ | $run_with_backend_privilege || ABORT "pg_ctl start failed"
	$PGSQL_BINDIR/pg_ctl -s -m fast \
		-D $BACKEND_DATA_DIR -l $BACKEND_DATA_DIR/logfile start
_EOF_

	# wait until portmaster actually starts. XXX are 3 seconds enough?
	sleep 3

	case "$BACKEND_VERSION" in
	[1-7].*|8.0)
		createuser_option=;;
	*)  # Don't ask the following question on PostgreSQL 8.1 or later:
	    #    Shall the new role be allowed to create more new roles? (y/n) 
		createuser_option=--no-createrole;;
	esac

	cat << _EOF_ | $run_with_backend_privilege || ABORT "createdb failed"
	PGHOST="$BACKEND_DATA_DIR"; export PGHOST
	PGPORT="$BACKEND_PORT"; export PGPORT
	unset PGDATABASE PGUSER PGPASSWORD PGSERVICE
	unset PGREALM PGOPTIONS PGSSLMODE PGREQUIRESSL PGCONNECT_TIMEOUT

	$PGSQL_BINDIR/createuser $createuser_option -A -D $BACKEND_USER
	$PGSQL_BINDIR/createdb $DB_NAME
	$PGSQL_BINDIR/psql -f "$config_dir/gfarm.sql" $DB_NAME
	$awk 'BEGIN {
		print "GRANT SELECT, INSERT, UPDATE, DELETE"
		print "	ON Host, HostAliases, Path, FileSection, FileSectionCopy"
		print "	TO $BACKEND_USER;"
	}
	FILENAME == "$admin_password" {
		print "ALTER USER $BACKEND_ADMIN_USER"
		printf "  WITH ENCRYPTED PASSWORD '"'%s'"';\n", \$0
	}
	FILENAME == "$password" {
		print "ALTER USER $BACKEND_USER"
		printf "  WITH ENCRYPTED PASSWORD '"'%s'"';\n", \$0
	}' $admin_password $password | $PGSQL_BINDIR/psql $DB_NAME
_EOF_

	service_ctl $RC_BACKEND_BASENAME stop

	# save configuration for administration
	mv "$BACKEND_DATA_DIR"/postgresql.conf \
	   "$BACKEND_DATA_DIR"/postgresql.conf.adm
	mv "$BACKEND_DATA_DIR"/pg_hba.conf \
	   "$BACKEND_DATA_DIR"/pg_hba.conf.adm
	# restore configuration
	mv "$BACKEND_DATA_DIR"/postgresql.conf.bak \
	   "$BACKEND_DATA_DIR"/postgresql.conf
	mv "$BACKEND_DATA_DIR"/pg_hba.conf.bak \
	   "$BACKEND_DATA_DIR"/pg_hba.conf
	;;
ldap)
	;;
esac

if $START_SERVICE; then
	service_add $RC_BACKEND_BASENAME &&
	service_ctl $RC_BACKEND_BASENAME restart ||
		ABORT "failed to start $RC_BACKEND_BASENAME"
	service_add gfmd &&
	service_ctl gfmd restart ||
		ABORT "failed to start gfmd"
fi

echo "$PROGNAME success"
status=0
# trap action automatically returns this $status as exit code
