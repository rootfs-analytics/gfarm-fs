
*** Gfarm system

Gfarm is a reference implementation of the Grid Datafarm architecture
designed for global petascale data-intensive computing.  It provides a
global virtual file system (Gfarm file system) having online petascale
storage, scalable I/O bandwidth, and scalable parallel computing,
federating and integrating local file system (or scratch disks) in
PCs.  It also support high-performance parallel and distributed data
computing exploiting local I/O in a grid of clusters with tens of
thousands of nodes.

Users or Grid applications access the Gfarm file system via POSIX file
I/O APIs and Gfarm native file I/O APIs with extension of new file
view semantics.  It is not necessary to recompile and re-link programs
to access Gfarm file system.  Any binary program can access the Gfarm
file system without any modification as if it were mounted at /gfarm.

Automatic replica selection depending on CPU load average makes it
fault tolerant and avoids access concentration, which is complete
transparent to users.

For a detailed information about the Grid Datafarm architecture and
its preliminary performance evaluation, refer to the following paper.

[1] Osamu Tatebe, Youhei Morita, Satoshi Matsuoka, Noriyuki Soda,
    Satoshi Sekiguchi,
    "Grid Datafarm Architecture for Petascale Data Intensive Computing,"
    Proceedings of the 2nd IEEE/ACM International Symposium on Cluster
    Computing and the Grid (CCGrid 2002),
    IEEE, pp.102-110, 2002
    http://datafarm.apgrid.org/

========================================================================

*** Component of Gfarm system

Gfarm system consists of the following nodes

 - client node

  Terminal node for users.

 - filesystem node

  Filesystem node provides disks and CPUs for the Gfarm system.  On
  each filesystem node, the Gfarm filesystem daemon, called gfsd, is
  running to facilitate remote file operations with access control in
  the Gfarm filesystem as well as user authentication, file
  replication, fast invocation, node resource status monitoring, and
  control.

 - metadata server node

  Metadata server node manages Gfarm filesystem metadata and parallel
  process information.  On the metadata server node, a Gfarm
  filesystem metaserver (gfmd), and a backend database server such as
  an LDAP server (slapd) and a PostgreSQL server (postmaster) are
  running.

 - metadata cache server node

  Metadata cache server is a proxy server to make metadata access
  faster, and to prevent metadata access concentration.  On metadata
  cache server nodes, gfarm_agent is running.

A file in the Gfarm filesystem is a standard file or a large-scale
file that is divided into fragments or a ranked group of files.
Physically, each file is replicated and dispersed across disks of
filesystem nodes, and which will be accessed in parallel.

A file in the Gfarm filesystem can be accessed using the Gfarm
parallel I/O library or Gfarm commands by a Gfarm URL such as
gfarm:/path/name, or as if it were mounted at /gfarm.

========================================================================

*** Structure of Gfarm software

Gfarm software consists of

 - libgfarm.a library

  A library that implements Gfarm APIs including Gfarm file access,
  file replication, parallel I/O extensions, parallel file transfer,
  and file-affinity process scheduling.  Parallel I/O extensions
  provide new file views; index file view and local file view, for
  parallel processes.

  To enable every existing (binary) program to access Gfarm file
  system without any modification, there are two ways; using Gfarm
  syscall hook library and using GfarmFS-FUSE.

 - gfmd - Gfarm filesystem metadata server

  gfmd is a Gfarm filesystem metadata server for accessing filesystem
  metadata of the Gfarm filesystem.  gfmd is needed to be running on a
  metadata server node in advance.

  In the current implementation, filesystem metadata is managed by
  either an LDAP server or PostgreSQL server.  It is also needed to be
  running on, typically, a metadata server node.

 - gfarm_agent - Gfarm metadata cache server

  gfarm_agent is a proxy server for the filesystem metadata server,
  which improves metadata access performance.  Typically, it is needed
  for each PC cluster.

 - gfsd - Gfarm filesystem daemon

  An I/O daemon for the Gfarm filesystem that is running on every
  filesystem node, which provides remote file operations with access
  control as well as user authentication, file replication, fast
  invocation, node resource status monitoring.

 - Gfarm command tools

  Gfarm command tools consist of filesystem commands such as gfls,
  gfrm, gfwhere and gfrep, a filesystem node management tool such as
  gfhost, file management tools such as gfreg and gfexport, session
  key management tools such as gfkey, and parallel process management
  tools such as gfps, gfrun and gfmpirun_p4.  All of them are located
  in the directory gftool/.

  In the gfptool/ directory, there are parallel Gfarm commands; gfcp
  for a parallel copy, gfgrep for a parallel grep, gfwc for a parallel
  word-counts, etc.

 - Gfarm sample programs

  This distribution includes several sample programs.  gfimport_fixed
  and gfimport_text are examples for dividing and registering
  a file to the Gfarm filesystem, which  are located in the directory
  gftool/example.

========================================================================

*** Installation

This distribution is fully tested on Linux.  Building test is done on
NetBSD, Solaris.

This section describes how to build Gfarm binaries from the source
distribution.  You can skip this section, if you use a binary
distribution.

To build the Gfarm system, OpenSSL library and either OpenLDAP library
or PostgreSQL library are required.  To utilize the Grid Security
Infrastructure (GSI) for authentication method, GSSAPI library is
needed.  Currently, GSSAPI library provided by the Globus toolkit
version 2, 3, and 4 (GT2, GT3, and GT4) are supported by the
configure.  When building a gfs_hook_mpi.o syscall-hook library for
executing legacy MPI applications on the Gfarm filesystem, and when
building sample MPI applications in this distribution, an MPI library
is needed.

Here are installation steps of the Gfarm system.
Please use GNU make on Operating Systems other than Linux and NetBSD.

	% ./configure [options]
	% make
	% su
	Password:
	# make install

Options for configure:

  --with-openldap=directory

  specifies an installation directory of the OpenLDAP.  When this
  option is not specified, the installation directory automatically
  tries to be searched.

  --with-postgresql=directory

  specifies an installation directory of the OpenLDAP.  When this
  option is not specified, the installation directory automatically
  tries to be searched.

  --with-openssl=directory

  specifies an installation directory of the OpenSSL.  Default
  directory is /usr.

  --with-mpi=directory

  specifies an installation directory of MPI to build sample MPI
  applications and a syscall-hook library for MPI applications.  If
  the directory is specified, ${directory}/bin/mpicc is used to
  compile MPI applications.  Otherwise, mpicc is used.  This is
  optional.

  --with-globus=directory

  specifies an installation directory of Globus Toolkit to utilize GSI
  authentication method.  When not specifying a directory, environment
  variable GLOBUS_LOCATION is used.  This is optional.  The flavor of
  Globus library automatically tries to be searched.  If you need to
  specify a flavor, specify it by the --with-globus-flavor=flavor
  option.

  --without-gfs_hook

  disables to build a syscall-hook library such as gfs_hook.o and
  libgfs_hook.so.  It is needed for AIX, on which syscall-hook library
  is not supported.

  --prefix=directory

  specifies a destination directory for installation.  Default is
  /usr/local directory.  This is optional.

  --sysconfdir=directory

  specifies a directory where ``gfarm.conf'' configuration file is
  located.  Default is ``etc'' directory under the directory which
  is specified in above --prefix option.  This document assumes
  that --sysconfdir=/etc is specified.  This is optional.

When you need to specify a compiler program explicitly, use the
environment variable CC.  This is an example using gcc.

	% env CC=gcc ./configure [options]

========================================================================

*** Initial configuration

This section describes an initial configuration by an administrator.

This section assumes the following setting.

 - Gfarm installation directory

	/usr/grid

 - Gfarm spool directory on filesystem nodes

	/var/gfarm-spool


In the case to use LDAP:

 - OpenLDAP installation directory

	/usr/local/openldap

 - hostname of an LDAP server

	metadb.example.com

 - TCP port number of the LDAP server

	10602

 - directory for configuration files of LDAP server

	/etc/gfarm-ldap

 - initial database file for LDAP database

	/etc/gfarm-ldap/initial.ldif

 - directory for LDAP database

	/var/gfarm-ldap

 - base distinguished name for LDAP database

	dc=example,dc=com

	It is recommended to choose the base distinguish name by using
	each component of the fully qualified domain name (FQDN) as
	a right hand value of "dc=".

 - organization name for LDAP database

	Example Com


In the case to use PostgreSQL:

 - PostgreSQL installation directory

	/usr/local/pgsql

 - hostname of a PostgreSQL server

	metadb.example.com

 - TCP port number of the PostgreSQL server

	10602

 - UNIX user name to run the PostgreSQL database server

	postgres

 - directory for the PostgreSQL database file

	/var/gfarm-pgsql

 - database name for PostgreSQL

	gfarm		

 - database user name for PostgreSQL

	gfarm

 - database user password for PostgreSQL

	secret-postgresql-password

------------------------------------------------------------------------

** Easy Installation Method

0. Prepare a filesystem metadata server node, (several) metadata cache
   server nodes, and (many) filesystem nodes.

1. If you will select PostgreSQL as the metadata backend database,
  please create the user ("postgresql" in the assumption above)
  for PostgreSQL database privilege. Although this user may be already
  created, especially if you are using a binary package like RPM.

2. Run the following command on the metadata server to see whether
  appropriate default values will be automatically configured or not:
	# config-gfarm -t

  If there are some default values which are not appropriate, you can
  change the values by specifying displayed options.

  If you choosed postgresql as the metadata backend database, you must
  make sure that the user, which is displayed in "postgresql admin user"
  section, does exist on the system. If the user doesn't exist, either
  you have to create the user, or you have to specify a valid user
  as an option of config-gfarm command.

  Also, you must make sure that three port numbers, which are displayed
  at the bottom of the config-gfarm command, are not used on your system.
  If some of them are currently used, you must specify free port number
  by an option of the config-gfarm command.
  Please note that If you choosed postgresql as the backend database,
  if have to specify a port number more than 1024.

3. Run the 'config-gfarm' command without '-t' option, which actually
  makes gfarm configured.
  For example, if you don't have to specify any option in the step 1.
  you can use the following command:
	# config-gfarm

4. The 'config-gfarm' command should generate /etc/gfarm.conf.
  (Or, if you are using FreeBSD binary package, it should generate
  /usr/local/etc/gfarm.conf. Or if you are using NetBSD binary package,
  it should generate /usr/pkg/etc/gfarm.conf)
  Please copy this file to /etc of all metadata cache server nodes.
  (Or, if you are using FreeBSD binary package on the metadata cache
  server, please copy it to /usr/local/etc. Or, if you are using
  NetBSD binary package on the metadata cache server, copy it to
  /usr/pkg/etc.)

5. Run the following command on every metadata cache server node to
  see whether appropriate default values will be automatically
  configured or not:
	# config-agent -t

  If there are some default values which are not appropriate, you can
  change the values by specifying displayed options.

6. Run the 'config-agent' command without '-t' option, which actually
  makes gfarm_agent configured.
  For example, if you don't have to specify any option in the step 5.
  you can use the following command:
	# config-agent

7. If you will use multiple metadata cache server, please repeat
  the step 4 through the step 6 on each metadata cache server.

8. The 'config-agent' command should update gfarm.conf.
  Please copy this file from an appropriate metadata cache server node
  that would be accessed to /etc of filesystem nodes.
  (Or, if you are using FreeBSD binary package on the filesystem node,
  please copy it to /usr/local/etc. Or, if you are using NetBSD binary
  package on the filesystem node, copy it to /usr/pkg/etc.)

9. Run the following command on every filesystem node to see whether
  appropriate default values will be automatically configured or not:
	# config-gfsd -t

  If there are some default values which are not appropriate, you can
  change the values by specifying displayed options.

10. Run the 'config-gfsd' command without '-t' option, which actually
  makes gfsd configured.
  For example, if you don't have to specify any option in the step 8.
  you can use the following command:
	# config-gfsd

11. Please repeat the step 8 through the step 10 on each filesystem
  node.

That's all.

The following section describes what this config-gfarm command and
config-gfsd command actually do.
If you don't have to know detailed description, please skip to "setting
of each user" section.

If you'd like to see further usage of config-gfarm, config-agent and
config-gfsd commands, please read INSTALL.RPM.en.

------------------------------------------------------------------------

** LDAP server

In the current distribution, an LDAP server manages the Gfarm
filesystem metadata.

The Gfarm supports OpenLDAP 2.1.X, and 2.2.X.  Other versions or other
LDAP servers are not tested enough.  OpenLDAP 2.0.X is known to work,
but OpenLDAP 2.1.X or later is strongly recommended, because 2.0.X
cannot distinguish upper case letters and lower case letters.


 - gfarm.schema

This is a schema file of Gfarm filesystem metadata for the LDAP
server.  Copy the file gftool/config-gfarm/gfarm.schema in the source
distribution to /etc/gfarm-ldap/gfarm.schema on metadb.example.com.

In the binary distribution, this file is installed to
/usr/grid/share/gfarm/config/gfarm.schema by the gfarm-server package.

There is no need to modify.

 - slapd.conf

This is a configuration file of an LDAP server included in the
OpenLDAP distribution.  It is necessary to include a schema file
gfarm.schema for Gfarm file system.  Note that suffix and rootdn in
this file refer to the base distinguished name. Because this file
includes a password, it's better to make this file only readable from
the user privilege that slapd has.

	# chmod 600 /etc/gfarm-ldap/slapd.conf

Here are example files of /etc/gfarm-ldap/slapd.conf on
metadb.example.com for OpenLDAP versions 2.0.X, 2.1.X and later.  Note
that the path name of core.schema on line 5 depends on the
installation of the OpenLDAP.  You need to specify a location of
core.schema in your installation of OpenLDAP.

--------------------- BEGIN HERE (OpenLDAP-2.0.X)--------------------
#
# See slapd.conf(5) for details on configuration options.
# This file should NOT be world readable.
#
include		/etc/openldap/schema/core.schema
include		/etc/gfarm-ldap/gfarm.schema

pidfile		/var/run/gfarm-slapd.pid
argsfile	/var/run/gfarm-slapd.args

# enable global write access for now. XXX
defaultaccess write

# unlimit search result
sizelimit 2000000000

# disable syslog
loglevel 0

#######################################################################
# database definitions
#######################################################################

database	ldbm

suffix		"dc=example, dc=com"
rootdn		"cn=root, dc=example, dc=com"

directory	/var/gfarm-ldap
rootpw		secret-ldap-password

# Indices to maintain
index	objectClass	eq

index	pathname	pres,eq
index	section		pres,eq
index	hostname	pres,eq
#
dbnosync
-------------------------------- END --------------------------------

---------------- BEGIN HERE (OpenLDAP-2.1.X or later) ---------------
#
# See slapd.conf(5) for details on configuration options.
# This file should NOT be world readable.
#
include		/etc/openldap/schema/core.schema
include		/etc/gfarm-ldap/gfarm.schema

pidfile		/var/run/gfarm-slapd.pid
argsfile	/var/run/gfarm-slapd.args

# enable global write access for now. XXX
allow bind_anon_dn update_anon
access to * by anonymous write

# unlimit search result
sizelimit unlimited

# disable syslog
loglevel 0

#######################################################################
# database definitions
#######################################################################

database	bdb

suffix		"dc=example, dc=com"
rootdn		"cn=root, dc=example, dc=com"

directory	/var/gfarm-ldap
rootpw		secret-ldap-password

# Indices to maintain
index	objectClass	eq

index	pathname	pres,eq
index	section		pres,eq
index	hostname	pres,eq
-------------------------------- END --------------------------------

 - Create the initial database file of filesystem metadata

Initial database should contain the root node information of LDAP,
which includes the base distinguished name specified by the "dn"
(distinguished name) attribute, and "top" specified by the
"objectclass" attribute.

This is a sample database file of /etc/gfarm-ldap/initial.ldif on
metadb.example.com.

----------------------------- BEGIN HERE -----------------------------
dn: dc=example, dc=com
objectclass: dcObject
objectclass: organization
objectclass: top
dc: example
o: Example Com
-------------------------------- END --------------------------------

 - Create an LDAP database

The 'slapadd' command creates an initial LDAP database.  The following
example shows how to create the initial LDAP database using the above
initial entries on metadb.example.com.

	# rm -rf /var/gfarm-ldap
	# mkdir /var/gfarm-ldap
	# chmod 700 /var/gfarm-ldap
	# cd /etc/gfarm-ldap
	# /usr/local/openldap/sbin/slapadd -f slapd.conf -l initial.ldif

 - Execute an LDAP server

An LDAP server is invoked by the 'slapd' command.

	# cd /usr/local/openldap/libexec/
	# ./slapd -f /etc/gfarm-ldap/slapd.conf -h ldap://:10602/

The -h option specifies a listening port number of the LDAP server.  
A sample start-up script can be found at package/<arch>/gfarm-slapd.
If you choose a port number less than 1024, you have to do above with
the root privilege.

 - Test the LDAP server

Try to execute the following commands.  If the same content as the
initial.ldif file is displayed, the LDAP server works fine.

In the case of the Bourne Shell:

	% host=metadb.example.com
	% port=10602
	% basedn='dc=example, dc=com'
	% cd /usr/local/openldap/bin
	% ./ldapsearch -x -b "$basedn" -L -h $host -p $port

In the case of the csh:

	% set host=metadb.example.com
	% set port=10602
	% set basedn='dc=example, dc=com'
	% cd /usr/local/openldap/bin
	% ./ldapsearch -x -b "$basedn" -L -h $host -p $port

------------------------------------------------------------------------

** PostgreSQL server

 - configure PostgreSQL

...

 - creating a database cluster

	# mkdir /var/gfarm-pgsql
	# chown postgres:postgres /var/gfarm-pgsql
	# chmod 700 /var/gfarm-pgsql
	# su - postgres
	$ initdb -D /var/gfarm-pgsql

 - starting database server

...

 - creating a database

...

------------------------------------------------------------------------

** ~/.gfarmrc

On a client node, you need to create a configuration file ~/.gfarmrc
when you do not have /etc/gfarm.conf or when you need to overwrite the
configuration of /etc/gfarm.conf.  Here is an example of the
configuration file.

In the case to use LDAP:
----------------------------- BEGIN HERE -----------------------------
metadb_serverhost metadb.example.com
ldap_serverhost metadb.example.com
ldap_serverport 10602
ldap_base_dn "dc=example, dc=com"
auth disable sharedsecret *
auth enable gsi *
-------------------------------- END --------------------------------

In the case to use PostgreSQL:
----------------------------- BEGIN HERE -----------------------------
metadb_serverhost metadb.example.com
postgresql_serverhost metadb.example.com
postgresql_serverport 10602
postgresql_dbname gfarm
postgresql_user gfarm
postgresql_password secret-postgresql-password
auth enable sharedsecret *
-------------------------------- END --------------------------------

The postgresql_user parameter and the postgresql_password parameter above
might be omitted, if your PostgreSQL authentication configuration doesn't
actually need these parameters.
Also, if you need some more parameters with regard to PostgreSQL, you
may be able to use postgresql_conninfo parameter. For example, if you
want to specify "require" as SSL mode, and 30 seconds for connection
timeout, you can use the following setting:
----------------------------- BEGIN HERE -----------------------------
postgresql_conninfo "sslmode=require connect_timeout=30"
-------------------------------- END --------------------------------
Please read the following PQconnectdb() function manual page in libpq
library of PostgreSQL for detail parameters that you can specify in
the postgresql_conninfo directive:
http://www.postgresql.jp/document/pg804doc/html/libpq.html#LIBPQ-CONNECT

** Register filesystem nodes

Every filesystem node needs to be registered to the Gfarm metadata.
The 'gfhost -c' command is used to register the node information,
which includes hostname, hostalias, architecture, and ncpu;

% gfhost -c -a <architecture> [ -n <ncpu> ] <hostname> [ <hostalias> ... ]

  -- hostname

    fully qualified domain name (FQDN) of the host.

  -- hostalias

    If the host has multiple network interfaces that have different
    hostnames, these hostnames can be specified as hostname aliases by
    subsequent parameters of the hostname.  This is optional.

  -- architecture

    architecture name like sparc-sun-solaris8, which is specified by
    the -a option.

  -- ncpu

    the number of cpus, which is specified by the -n option.  This is
    optional.

The followings are sample commands to register those information.

	% gfhost -c -a i386-fedora3-linux -n 2 linux-1.example.com
	% gfhost -c -a i386-fedora3-linux -n 2 linux-2.example.com
	% gfhost -c -a i386-fedora3-linux -n 2 linux-3.example.com
	% gfhost -c -a i386-redhat8.0-linux linux-4.example.com
	% gfhost -c -a i386-debian3.0-linux -n 2 linux-5.example.com
	% gfhost -c -a i386-debian3.0-linux -n 2 linux-6.example.com
	% gfhost -c -a sparc-sun-solaris8 solaris-1.example.com
	% gfhost -c -a sparc-sun-solaris8 solaris-2.example.com
	% gfhost -c -a alpha-hp-osf5.0 osf-1.example.com
	% gfhost -c -a mips-sgi-irix6.5 -n 16 irix-1.example.com

You can confirm the filesystem node information by specifying the -M
option with the gfhost command:

	% gfhost -M
	i386-fedora3-linux 2 linux-1.example.com
	i386-fedora3-linux 2 linux-2.example.com
	i386-fedora3-linux 2 linux-3.example.com
	i386-redhat8.0-linux 1 linux-4.example.com
	i386-debian3.0-linux 2 linux-5.example.com
	i386-debian3.0-linux 2 linux-6.example.com
	sparc-sun-solaris8 1 solaris-1.example.com
	sparc-sun-solaris8 1 solaris-2.example.com
	alpha-hp-osf5.0 1 osf-1.example.com
	mips-sgi-irix6.5 16 irix-1.example.com

------------------------------------------------------------------------

** Create a gfsd spool directory on filesystem nodes

On each filesystem node, create a spool root directory
/var/gfarm-spool.

	% su
	Password: 
	# mkdir /var/gfarm-spool
	# chmod 1777 /var/gfarm-spool
	# exit
	% 

** /etc/gfarm.conf

Create /etc/gfarm.conf on every filesystem node and metadata server
nodes.  Here is an example of the configuration file.

In the case to use LDAP:
----------------------------- BEGIN HERE -----------------------------
spool /var/gfarm-spool
metadb_serverhost metadb.example.com
ldap_serverhost metadb.example.com
ldap_serverport 10602
ldap_base_dn "dc=example, dc=com"
auth disable sharedsecret *
auth enable gsi *
-------------------------------- END --------------------------------

In the case to use PostgreSQL:
----------------------------- BEGIN HERE -----------------------------
spool /var/gfarm-spool
metadb_serverhost metadb.example.com
postgresql_serverhost metadb.example.com
postgresql_serverport 10602
postgresql_dbname gfarm
postgresql_user gfarm
postgresql_password secret-postgresql-password
auth enable sharedsecret *
-------------------------------- END --------------------------------

In other words, /etc/gfarm.conf on filesystem nodes needs "spool"
parameter in addition to the contents of ~/.gfarmrc on client hosts.
Please read ~/.gfarmrc description above for parameters other than
"spool" in /etc/gfarm.conf.

When filesystem nodes or metadata server nodes are used as a client
node, client programs read ~/.gfarmrc first if it exists, and then
read /etc/gfarm.conf.

** gfmd - Gfarm filesystem metadata server

On a metadata server node, execute gfmd with a root privilege.  Gfmd
reads the configuration file /etc/gfarm.conf described above.

If you install from a binary distribution, the following start-up
script is provided to start and stop gfmd.
	RedHat Linux:		/etc/rc.d/init.d/gfmd
	Debian GNU/Linux:	/etc/init.d/gfmd
	Solaris:		/etc/rc3.d/S90gfmd

If you install from a source distribution, the start-up script will be
generated to package/<OS>/gfmd at the configuration time.  On Debian
GNU/Linux system, the location is debian/gfmd.init.  Copy this script
in the start-up directory such as /etc/rc.d/init.d, /etc/init.d, and
/etc/rc3.d.

The procedure to invoke gfmd by this script is as follows:
	RedHat Linux:
		% su
		Password: 
		# /sbin/chkconfig --add gfmd
		# service gfmd start
	Debian GNU/Linux:
		% su
		Password: 
		# /etc/init.d/gfmd start
	Solaris:
		% su
		Password: 
		# /etc/rc3.d/S90gfmd start

If you would like to execute gfmd directly, you can do as follows:
	% su
	Password: 
	# /usr/grid/sbin/gfmd

For a testing purpose, gfmd can be executed as a non-privileged user
process with the -f option (see man gfmd), although only the user that
executes the gfmd can be authenticated.

To see whether gfmd is correctly executed or not, you can use the gfps
command as follows.  If gfmd is correctly invoked, gfps immediately
exits without any warning message.

	% gfps

** gfsd - Gfarm filesystem daemon

On every filesystem node, execute gfsd with a root privilege.  Gfsd
reads the configuration file /etc/gfarm.conf described above.

If you install from a binary distribution, the following start-up
script is provided to start and stop gfsd.
	RedHat Linux:		/etc/rc.d/init.d/gfsd
	Debian GNU/Linux:	/etc/init.d/gfsd
	Solaris:		/etc/rc3.d/S95gfsd

If you install from a source distribution, the start-up script will be
generated to package/<OS>/gfsd at the configuration time.  On Debian
GNU/Linux system, the location is debian/gfsd.init.  Copy this script
in the start-up directory such as /etc/rc.d/init.d, /etc/init.d, and
/etc/rc3.d.

The procedure to invoke gfsd by this script is as follows:
	RedHat Linux:
		% su
		Password: 
		# /sbin/chkconfig --add gfsd
		# service gfsd start
	Debian GNU/Linux:
		% su
		Password: 
		# /etc/init.d/gfsd start
	Solaris:
		% su
		Password: 
		# /etc/rc3.d/S95gfsd start

If you would like to execute gfsd directly, you can do as follows:
	% su
	Password: 
	# /usr/grid/sbin/gfsd

For a testing purpose, gfsd can be executed as a non-privileged user
process with the -f option (see man gfsd), although only the user that
executes the gfmd can be authenticated.

To see whether gfsd is correctly executed or not, you can use the
gfhost command with the -l option as follows.  The first column shows
system load averages of the host for the past 1, 5, and 15 minutes.
Next column shows an authentication method which is used for the
communication with the host.  If an authentication method is shown
as "x", that means the authentication is failed.

	% gfhost -l
	0.01/0.03/0.03 s i386-fedora3-linux 2 linux-1.example.com(10.0.0.1)
	0.00/0.00/0.00 s i386-fedora3-linux 2 linux-2.example.com(10.0.0.2)
	-.--/-.--/-.-- - i386-fedora3-linux 2 linux-3.example.com(10.0.0.3)
	0.00/0.02/0.00 x i386-redhat8.0-linux 1 linux-4.example.com(10.0.0.4)
	0.40/0.45/0.42 s i386-debian3.0-linux 2 linux-5.example.com(10.0.0.5)
	0.43/0.50/0.40 s i386-debian3.0-linux 2 linux-6.example.com(10.0.0.6)
	0.10/0.00/0.00 G sparc-sun-solaris8 1 solaris-1.example.com(10.0.1.1)
	x.xx/x.xx/x.xx - sparc-sun-solaris8 1 solaris-2.example.com(10.0.1.2)
	0.00/0.00/0.00 s alpha-hp-osf5.0 1 osf-1.example.com(10.0.1.17)
	0.35/0.58/0.21 s mips-sgi-irix6.5 16 irix-1.example.com(10.0.1.18)

In the above example, -.-- of linux-3.example.com shows there is no
gfsd listening to the specified port on the machine.  x.xx of
solaris-2.example.com shows that it is impossible to communicate
with the node.  Usually this means the node or network is down.  Add
"-v" option to investigate the reason of such failure.  This option
makes error messages appear.

** setting of each user

Add the following setting to the shell rc file (e.g. .bashrc, .cshrc)
of each user.

In the case of the Bourne Shell:
	gfcd() { eval "`gfsetdir -s $1`"; }

In the case of the csh:
	alias gfcd 'eval `gfsetdir -c \!*`'

Add /usr/grid/bin to the setting of the PATH environment variable.

Then the user can use gfcd command to change the Gfarm working directory
like the follows:

	% gfcd foo

Current working directory can be displayed by gfpwd command.

	% gfpwd

** Other settings

Every Gfarm user has to create his working directory in a Gfarm
filesystem.  The system administrator has to register Gfarm parallel
commands to the Gfarm filesystem.  Both of these procedures are
described in next section.

========================================================================

*** Examples

This section describes execution examples.

** Sign on

Currently, we support two authentication methods; a shared secret key
and the Grid Security Infrastructure.  You can select either method by
the configuration file; /etc/gfarm.conf or ~/.gfarmrc.

*** Shared secret key

This authentication method basically assumes a trusted environment
such that every node shares a home directory.  A shared secret key is
automatically created if it does not exist or has been expired, which
can be accessed by every node in the shared home directory.  There is
no need to sign on explicitly.

However, in a global environment or even a local cluster environment
that does not share the home directory, the shared secret key should
be securely distributed by users explicitly.  First, create a session
key, ~/.gfarm_shared_key, by gfkey command.

	% gfkey -c

Then, copy the key securely to the home directory on all nodes
including filesystem nodes, a metadata server node, and client nodes
usually by scp.  Note that this key will be expired after 24 hours.

*** Grid Security Infrastructure (GSI)

This authentication method requires a user certificate, and host
certificates for every filesystem node and a metadata server.
Moreover, your entry should be listed in a grid map file
/etc/grid-security/grid-mapfile on every node.
Please look at the following WWW page for the details of GSI.
	http://www.globus.org/security/

Then, create a user proxy certificate.

	% grid-proxy-init

** Create user's working directory in a Gfarm file system

Every user has to create a working directory (or a home directory) in
a Gfarm file system, by oneself.

	% gfmkdir gfarm:~

** Confirmation

Please try to access filesystem nodes in your system:

	% gfhost | gfrun -H - hostname

** Execute sample programs

This subsection shows several execution examples of sample programs.

 - Importing a group of files

  When there are several files that are better to be managed as a
  ranked group of files, they can be registered to the Gfarm
  filesystem as a Gfarm file.  For example, there are ten files from
  'file01' to 'file10', which will be imported to a gfarm:file by the
  gfreg command.

	% gfreg file?? gfarm:file

  At this time, ten files from 'file01' to 'file10' are grouped, and
  can be accessed by a single Gfarm file 'gfarm:file'.

	% gfls -l gfarm:file

  Next, you can check filesystem nodes on which each file is stored by
  the gfexport command.

	% gfwhere gfarm:file
	0: linux-1.example.com
	1: linux-2.example.com
	2: linux-3.example.com
	3: linux-4.example.com
	4: linux-5.example.com
	5: linux-6.example.com
	6: solaris-1.example.com
	7: solaris-2.example.com
	8: osf-1.example.com
	9: irix-1.example.com

  The left part of ':' in the output of gfwhere is called 'the index
  number' or 'the section name'.  The right part of ':' shows
  filesystem node(s) where the file fragment is stored.

  A Gfarm file can be accessed by a single file to which a ranked
  group of files are concatenated, or an individual file of a group of
  files.  Using the gfexport command, the content of a file will be
  displayed.

	% gfexport gfarm:file
	% gfexport -I 0 gfarm:file

  A group of files can also be registered by specifying an individual
  file with the index number and total number of files.

	% gfreg -I 0 -N 10 [ -h filesystem node ] file01 gfarm:file
	% gfreg -I 1 -N 10 [ -h filesystem node ] file02 gfarm:file
	% ...
	% gfreg -I 9 -N 10 [ -h filesystem node ] file10 gfarm:file

  A filesystem node on which each file is stored will be automatically
  selected by load average.  It is possible to specify a filesystem
  node explicitly with the -h option.

  When the gfreg command of this form is executed on a filesystem
  node, the local filesystem node is always selected rather than
  remote filesystem nodes.  In this case, the -h option helps to store
  files dispersively.

 - Importing a text file

  Gfimport_text is a sample program for dividing a text file to file
  fragments by the line and registering it to the Gfarm filesystem.

	% gfhost | gfimport_text -H - -o gfarm:test.txt textfile

  In this example, textfile in a local filesystem is divided to file
  fragments which will be stored on currently available filesystem
  nodes listed by the gfhost command.

	% gfsched -N 8 | gfimport_text -H - -o gfarm:test.txt textfile

  In this example, textfile in a local filesystem is divided to 8 file
  fragments, and each fragment file will be stored on 8 hosts which are
  chosen by the gfsched command.

  Using the gfwhere command, you can see which filesystem node each
  file fragment is stored on.

	% gfwhere gfarm:test.txt

  Also, you can browse a directory using the gfls command.

	% gfls -l

  The gfexport command outputs a Gfarm file to the standard output.
  Using this, you can check whether gfimport_text correctly copies the
  "textfile" to the "gfarm:test.txt" in the Gfarm filesystem.

	% gfexport gfarm:test.txt | diff -c - textfile

 - Importing a fixed-size record file

	% gfsched -N 8 | gfimport_fixed -H - -o gfarm:test.bin \
                         -l 100 fixed-size-record-file

  You can check whether gfimport_fixed correctly copies the
  "fixed-size-record-file" to the "gfarm:test.bin" in the Gfarm
  filesystem.

	% gfexport gfarm:test.bin | cmp - fixed-size-record-file

 - gfgrep - parallel grep

  At first, you need to register (or copy) the gfgrep program on one
  of file system nodes.

	% gfreg /usr/bin/gfgrep gfarm:gfgrep

  If you would like to register on a client node (not on a file system
  node), it is necessary to specify a file system node by the -h
  option or an architecture name by the -a option.

	% gfreg -h linux-1.example.com /usr/bin/gfgrep gfarm:gfgrep

  The gfrun command executes a parallel command on filesystem nodes
  with file-affinity scheduling.

	% gfrun -G gfarm:text.txt gfarm:gfgrep -o gfarm:gfgrep.out \
		regexp gfarm:test.txt

  You can check the result to compare the following outputs.

	% gfexport gfarm:gfgrep.out
	% grep regexp textfile

 - gfwc - parallel word counts

  This command only exists, if the --with-mpi option is specified at
  building binaries.

  At first, you need to register the gfwc program on one of file
  system nodes.

	% gfreg /usr/bin/gfwc gfarm:gfwc

  Since gfwc is an MPI application, it is executed using gfmpirun_p4.

	% gfmpirun_p4 gfarm:gfwc gfarm:test.txt

  You can check the result.

	% wc test.txt

$Id$
